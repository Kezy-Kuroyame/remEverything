import asyncio
import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from toTime import TimeMessage, toListTime
from sql import SQLighter
from aiogram.dispatcher import FSMContext
import re
from config import token_bot

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞
bot = Bot(token=token_bot)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')

# –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
soon_reminder = dict()
text = ""
time_message = datetime.datetime.now()

""" ---  Telegram bot  ---"""


class Form(StatesGroup):
    # menu_state = State()
    text_state = State()
    time_state = State()
    date_state = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    btn_create_reminder = types.KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å')  # –∫–Ω–æ–ø–∫–∞ ¬´–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ¬ª
    btn_list = types.KeyboardButton(text='üìñ –°–ø–∏—Å–æ–∫')  # –∫–Ω–æ–ø–∫–∞ ¬´–°–ø–∏—Å–æ–∫¬ª
    keyboard.add(btn_create_reminder, btn_list)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # await Form.menu_state.set()
    await bot.send_message(text=f"{message.from_user.first_name}, –æ —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?",
                           reply_markup=keyboard, chat_id=message.from_user.id)


async def cancel(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã"""
    await state.reset_state()
    await start(message)


@dp.message_handler(lambda message: message.text and ('‚ûï –î–æ–±–∞–≤–∏—Ç—å' in message.text or
                                                      "üìñ –°–ø–∏—Å–æ–∫" in message.text))
async def menu(message: types.Message, state: FSMContext):
    print("–õ–æ–≥–∏–∫–∞")
    if message.text == "/start":
        await start(message)

    # –ö–æ–º–∞–Ω–¥–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        print("–î–æ–±–∞–≤–∏—Ç—å")
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_back = types.KeyboardButton(text="‚è™ –û—Ç–º–µ–Ω–∞")
        keyboard.add(btn_back)
        await Form.next()

        await bot.send_message(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                               reply_markup=keyboard, chat_id=message.from_user.id)

    # –ö–æ–º–∞–Ω–¥–∞ "üìñ –°–ø–∏—Å–æ–∫"
    if message.text == "üìñ –°–ø–∏—Å–æ–∫":
        await state.reset_state()
        await createList(message.from_user.id)


@dp.callback_query_handler(text_contains="list")
async def gotoList(call: types.CallbackQuery):
    chat_id = call.from_user.id
    await createList(chat_id, edit=True, call=call)


async def createList(chat_id, edit=False, call=types.CallbackQuery()):
    """–°–æ–∑–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    print("–°–ø–∏—Å–æ–∫")
    rows = db.get_reminders(chat_id)
    if len(rows) != 0:
        user_list = ""
        inline_kb = types.InlineKeyboardMarkup(row_width=7)
        inline_kb.row()
        buttons = []
        for row_index in range(len(rows)):
            user_list += f"{row_index + 1}) {rows[row_index][2]} {toListTime(rows[row_index][3])}" + "-" * 75 + "\n"

            # –ò–Ω–ª–∞–π–Ω –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            inline_kb.insert(types.InlineKeyboardButton(f'[ {row_index + 1} ]',
                                                        callback_data=f'btn-{row_index + 1}'))

        user_list += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        if edit:
            await call.message.edit_text(text=user_list,
                                         reply_markup=inline_kb, parse_mode="Markdown")
        else:
            await bot.send_message(text=user_list,
                                   reply_markup=inline_kb, chat_id=chat_id, parse_mode="Markdown")
    else:
        if edit:
            await call.message.edit_text(text='–û–π –∫–∞–∂–µ—Ç—Å—è –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç :(',
                                        parse_mode="Markdown")
        else:
            await bot.send_message(text='–û–π –∫–∞–∂–µ—Ç—Å—è –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç :(',
                                   chat_id=chat_id, parse_mode="Markdown")



""" –õ–æ–≥–∏–∫–∞ –î–æ–±–∞–≤–ª–µ–Ω–∏—è"""


@dp.message_handler(state=Form.text_state)
async def createReminderText(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    global text

    if message.text == "‚è™ –û—Ç–º–µ–Ω–∞":
        await cancel(message, state)
    else:
        async with state.proxy() as data:
            data['text_state'] = message.text
        print("–¢–µ–∫—Å—Ç")
        await Form.next()
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
        text = message.text


@dp.message_handler(state=Form.time_state)
async def createReminderData(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    global time_message
    global text

    if message.text == "‚è™ –û—Ç–º–µ–Ω–∞":
        await cancel(message, state)
    else:
        # !!!!!!!!!!!!!!!
        time_message = TimeMessage(message.text)
        try:
            time_message.inNormalTime()
        except ValueError:
            await bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, "
                                                         "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å. "
                                                         "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n\n"
                                                         "*–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n\n"
                                                         " - –≤ 19\n"
                                                         " - –∑–∞–≤—Ç—Ä–∞\n"
                                                         " - –∑–∞–≤—Ç—Ä–∞ –≤ 20-15 (–∏–ª–∏ –≤ 20.15, –∏–ª–∏ –≤ 20:15)\n"
                                                         " - —á–µ—Ä–µ–∑ —á–∞—Å\n"
                                                         " - —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç \n"
                                                         " - 30.01.2025 –≤ 21\n\n"
                                                         "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â—ë —Ä–∞–∑", parse_mode="Markdown")
            await state.reset_state()
            await Form.time_state.set()
            return createReminderData

        time_message = time_message.inNormalTime()
        print("–í—Ä–µ–º—è")

        db.add_reminder(message.from_user.id, text, time_message)
        await state.reset_state()
        await bot.send_message(message.from_user.id,
                               f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ \n\n" +
                               f"*–¢–µ–∫—Å—Ç*:\n" +
                               f"  *¬∑*  {text} \n" +
                               f"*–í—Ä–µ–º—è*:\n" +
                               f"  *¬∑* {time_message.strftime('%d.%m.%Y –≤ %H:%M:%S')}",
                               parse_mode="Markdown")

        asyncio.create_task(
            reminder(db.get_reminder(user_id=message.from_user.id, message=text, time_message=time_message))
        )
        await start(message)


async def reminder(row):
    """–¢–∞–π–º–µ—Ä, –≤ –∫–æ—Ç–æ–º –∏ –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    time_reminder = re.split(r"\W", row[3])
    time_reminder = map(int, time_reminder)
    await asyncio.sleep((datetime.datetime(*time_reminder) - datetime.datetime.now()).total_seconds())

    if db.check_reminder(id_row=row[0]):
        await bot.send_message(chat_id=row[1], text=row[2])
        db.delete_reminder(id_row=row[0])


""" –õ–æ–≥–∏–∫–∞ –°–ø–∏—Å–∫–∞"""


@dp.callback_query_handler(text_contains="btn")
async def process_callback(call: types.CallbackQuery):
    """–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ"""
    rows = db.get_reminders(user_id=call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏

    print(call.data)
    number = call.data.split("-")[1]
    if number.isdigit():
        number = int(number)
    row = rows[number - 1]

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{number}")
    btn2 = types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"list")
    inline_kb.row(btn1, btn2)

    time_ = datetime.datetime(*map(int, re.split(r"\W", row[3]))).strftime("%d.%m.%Y –≤ %H:%M")

    await call.message.edit_text(f"{row[2]}\n\n" +
                                 "*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: * \n" +
                                 f"{time_}", reply_markup=inline_kb, parse_mode='Markdown')


@dp.callback_query_handler(text_contains="delete")
async def delete_callback(call: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    rows = db.get_reminders(user_id=call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    btn = types.InlineKeyboardButton(text="üìÉ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="list")
    inline_kb.add(btn)

    print("delete")
    number = int(call.data.split("_")[1])

    row = rows[number - 1]

    db.delete_reminder(id_row=row[0])
    await call.message.edit_text("‚õî –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ DELETED ‚õî", reply_markup=inline_kb, parse_mode="Markdown")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
